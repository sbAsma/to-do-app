{"version":3,"sources":["components/toDoItem.js","components/toDoList.js","components/toDo.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","todoBox","minHeight","todo","display","flexDirection","alignItems","width","todoText","marginTop","marginBottom","height","color","palette","text","primary","cursor","todoIcon","justifyContent","margin","clearIconButton","iconRoot","textAlign","radioButtonUncheckedIcon","borderRadius","borderStyle","borderWidth","border","checkBox","backgroundImage","background","paper","backgroundOrigin","backgroundClip","hr","backgroundColor","ToDoItem","index","handleUpdateTodo","deleteTodo","classes","useState","hoverId","sethoverId","iconCheckedStyle","draggableId","provided","snapshot","Box","ref","innerRef","draggableProps","dragHandleProps","className","xs","FormControlLabel","control","Checkbox","icon","checkedIcon","style","fontSize","checked","name","onChange","id","disableRipple","onMouseOver","onMouseOut","Typography","textDecoration","IconButton","visibility","disableFocusRipple","onClick","Icon","root","src","alt","isDragging","boxShadow","shadows","actionButtons","position","nbItemsLeft","secondary","buttonGroup","breakpoints","down","zIndex","top","button","textTransform","fontWeight","hover","reorderMsgBox","reorderMsg","ToDoList","isSubmit","afterSubmit","todos","updateTodos","filterBy","setFilterBy","useEffect","axios","get","then","res","data","catch","err","console","log","post","newTodo","newTodoList","todo_","find","patch","updatedTodos","map","delete","filter","length","Fragment","onDragEnd","result","destination","items","Array","from","splice","source","reorderedItem","droppableId","droppableProps","placeholder","cpt","countTodos","Button","clearTodos","paddingRight","window","location","origin","defaults","baseURL","bgDesktop","backgroundRepeat","backgroundSize","default","content","title","titleText","letterSpacing","themeIconButton","padding","imageIcon","inputTodo","inputTodoTextField","paddingTop","marginRight","marginLeft","inputTodoIcon","bgMobile","between","ToDo","changeTheme","setTodo","handleNewTodo","e","target","value","component","Grid","variant","onSubmit","preventDefault","TextField","type","fullWidth","focused","InputProps","disableUnderline","input","App","setTheme","customTheme","useMemo","createTheme","typography","fontFamily","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b3ba339.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { makeStyles } from '@material-ui/core'\r\nimport {\r\n\tTypography,\r\n\tBox,\r\n    IconButton,\r\n    FormControlLabel,\r\n    Checkbox,\r\n    Icon,\r\n} from '@material-ui/core'\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    todoBox: {\r\n        minHeight: '63px',\r\n    },\r\n    todo: {\r\n        display: 'flex',\r\n\t\tflexDirection: 'row',\r\n        alignItems: 'left',\r\n\t\twidth: '100%',\r\n        minHeight: '63px',\r\n\t\t// height: '100%',\r\n    },\r\n    todoText: {\r\n        marginTop: '15px',\r\n        marginBottom: '15px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        height: 'auto',\r\n        color: theme.palette.text.primary,\r\n        '&:hover': {\r\n            cursor: 'pointer',\r\n        },\r\n    },\r\n    todoIcon: {\r\n        width: '60px',\r\n        justifyContent: 'center',\r\n        margin: 'auto',\r\n    },\r\n    clearIconButton: {\r\n        width: '60px',\r\n        justifyContent: 'center',\r\n        margin: 'auto',\r\n    },\r\n    iconRoot: {\r\n        textAlign: 'center'\r\n    },\r\n    radioButtonUncheckedIcon: {\r\n        width: \"20px\",\r\n        height: \"20px\",\r\n        borderRadius: \"11px\",\r\n        borderStyle: 'solid',\r\n        borderWidth: 'thin',\r\n        color: theme.palette.border.primary,\r\n    },\r\n    checkBox: {\r\n        \"&:hover\": {\r\n            \"& div\": {\r\n                width: \"20px\",\r\n                height: \"20px\",\r\n                border: '1px solid transparent',\r\n                backgroundImage: 'linear-gradient('+theme.palette.background.paper\r\n                                +', '+theme.palette.background.paper\r\n                                +'), radial-gradient(circle at top left,' \r\n                                +'hsl(192, 100%, 67%),hsl(280, 87%, 65%))',\r\n                backgroundOrigin: 'border-box',\r\n                backgroundClip: 'content-box, border-box',\r\n            }\r\n        }\r\n    },\r\n    hr: {\r\n        margin: \"0px\",\r\n        border: \"none\",\r\n        height: '1px',\r\n        backgroundColor: theme.palette.border.primary,\r\n    },\r\n}))\r\n\r\nexport default function ToDoItem({index, todo, handleUpdateTodo, deleteTodo}) {\r\n    const classes = useStyles()\r\n    const [hoverId,sethoverId]=useState(0);\r\n    const iconCheckedStyle = {\r\n        background: 'linear-gradient(to right bottom, hsl(192, 100%, 67%), hsl(280, 87%, 65%))',\r\n        width: '4px',\r\n        height: '4px',\r\n    }\r\n    return (\r\n        <Draggable \r\n            \r\n            draggableId={todo.text} \r\n            index={index}\r\n        >\r\n            {(provided, snapshot) => (\r\n                <Box \r\n                    ref={provided.innerRef} \r\n                    {...provided.draggableProps} \r\n                    {...provided.dragHandleProps}\r\n                    className={classes.todoBox} \r\n                    xs={12} \r\n                    \r\n                >\r\n                    <div className={classes.todo}>\r\n                        <FormControlLabel\r\n                            className={classes.todoIcon}\r\n                            control={\r\n                                <Checkbox \r\n                                    icon={\r\n                                        <div \r\n                                            className={classes.radioButtonUncheckedIcon} \r\n                                        />\r\n                                    }\r\n                                    checkedIcon={<DoneIcon \r\n                                                    style={{\r\n                                                        color: \"white\",\r\n                                                        fontSize: '15px',\r\n                                                    }}\r\n                                                />}\r\n                                    style={\r\n                                        todo.checked? \r\n                                            iconCheckedStyle \r\n                                            : {background: \"none\"}\r\n                                    }\r\n                                    name=\"checked\" \r\n                                    checked={todo.checked}\r\n                                    onChange={() => handleUpdateTodo(todo.id)}\r\n                                    disableRipple={true}\r\n                                    className={classes.checkBox}\r\n                                />\r\n                            }\r\n                        />\r\n                        <div\r\n                            className={classes.todo}\r\n                            onMouseOver={()=>sethoverId(todo.id)} \r\n                            onMouseOut={()=>sethoverId(0)}\r\n                        >\r\n                            <Typography\r\n                                className= {classes.todoText}\r\n                                style={ \r\n                                    todo.checked? {\r\n                                        textDecoration: 'line-through',\r\n                                        color: 'gray',\r\n                                    }: {}\r\n                                }\r\n                            >\r\n                                {todo.text}\r\n                            </Typography>\r\n                            <IconButton\r\n                                className={classes.clearIconButton}\r\n                                style={{\r\n                                    visibility: (hoverId!==todo.id) && 'hidden',\r\n                                    background:\"none\",\r\n                                }}\r\n                                disableRipple={true}\r\n                                disableFocusRipple={true}\r\n                                onClick={() => deleteTodo(todo.id)}\r\n                            >\r\n                                <Icon classes={{root: classes.iconRoot}}>\r\n                                    <img \r\n                                        src=\"/images/icon-cross.svg\"\r\n                                        alt=\"cross icon\"\r\n                                    />\r\n                                </Icon>\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>  \r\n                    <hr \r\n                        className={classes.hr}\r\n                        style={{\r\n                            display: snapshot.isDragging && 'none',\r\n                        }}\r\n                    />\r\n                </Box>  \r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { \r\n    DragDropContext, \r\n    Droppable,\r\n} from 'react-beautiful-dnd';\r\nimport { makeStyles } from '@material-ui/core'\r\nimport {\r\n\tTypography,\r\n\tBox,\r\n    Button,\r\n} from '@material-ui/core'\r\nimport ToDoItem from './toDoItem'\r\n\r\nimport axios from 'axios'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        borderRadius: '5px',\r\n        backgroundColor: theme.palette.background.paper,\r\n        boxShadow: theme.shadows[20],\r\n    },\r\n    actionButtons: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        width: '100%',\r\n        justifyContent: 'space-between',\r\n        height: '55px',   \r\n        position: 'relative', // for mobile disp \r\n    },\r\n    nbItemsLeft: {\r\n        margin: 'auto auto auto 20px',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    buttonGroup: {\r\n        display: 'flex',\r\n        margin: 'auto',\r\n        height: '100%',\r\n        justifyContent: 'center',\r\n        [theme.breakpoints.down('xs')]: {\r\n            zIndex: 1,\r\n            position: 'absolute',\r\n            top: '75px',\r\n            height: '55px',\r\n            width: '100%',\r\n            borderRadius: '5px',\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n    },\r\n    button: {\r\n        textTransform: 'capitalize',\r\n        fontWeight: 700,\r\n        color: theme.palette.text.secondary,\r\n        '&:hover':{\r\n            color: theme.palette.text.hover,\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    reorderMsgBox: {\r\n        marginTop: '50px',\r\n        display: 'flex',\r\n\t\tflexDirection: 'row',\r\n        justifyContent: 'center',\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginTop: '105px',\r\n        }\r\n    },\r\n    reorderMsg: {\r\n        fontWeight: 700,\r\n        fontSize: '0.7em',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}))\r\n\r\nif (window.location.origin === \"http://localhost:3000\") {\r\n    axios.defaults.baseURL = \"http://127.0.0.1:8000\"; // development address\r\n} else {\r\n    axios.defaults.baseURL = window.location.origin; // production address\r\n}\r\n\r\nexport default function ToDoList({isSubmit, text, checked, afterSubmit}) {\r\n    const classes = useStyles()\r\n    const [todos, updateTodos] = useState([])\r\n    const [filterBy, setFilterBy] = useState('all')\r\n    \r\n    useEffect(()=>{\r\n        // Get todo list\r\n        axios.get('todo/')\r\n        .then((res) => {\r\n            updateTodos(res.data)\r\n        }).catch((err) =>{\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n    useEffect(() =>{\r\n        console.log(\"useEffect is being called\")\r\n        // Create a new todo\r\n        if(isSubmit === true){\r\n            axios.post('todo/',{\r\n                'text': text,\r\n                'checked': checked,\r\n            }).then((res)=>{\r\n                const newTodo = res.data\r\n                const newTodoList = [...todos, newTodo]\r\n                updateTodos(newTodoList)\r\n\r\n            }).catch((err)=>{\r\n                console.log(err)\r\n            })\r\n            afterSubmit()\r\n        }\r\n    }, [isSubmit])\r\n    const handleUpdateTodo = (id) => {\r\n        // Edit todo\r\n        const todo_ = todos.find(todo => todo.id === id)\r\n        axios.patch('todo/'+ id +'/', {\r\n            'text': todo_.text,\r\n            'checked': !todo_.checked,\r\n        }).then((res)=>{\r\n            const updatedTodos = todos.map((todo) =>{\r\n                if(todo.id===id){ \r\n                    return res.data\r\n                } else return todo\r\n            })\r\n            updateTodos(updatedTodos)\r\n            \r\n        }).catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n    const deleteTodo = (id) => {\r\n        // Delete todo\r\n        axios.delete('todo/'+ id +'/')\r\n        .then((res)=>{\r\n            const newTodoList = todos.filter((todo) => {\r\n                if(todo.id !== id) return todo\r\n                else return null\r\n            })\r\n            updateTodos(newTodoList)\r\n        }).catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n    const handleAllClick = () => {\r\n        setFilterBy('all')\r\n    }\r\n    const handleActiveClick = () => {\r\n        setFilterBy('active')\r\n    }\r\n    const handleCompltedClick = () => {\r\n        setFilterBy('completed')\r\n    }\r\n    const handleClearClick = () => {\r\n        const clearTodos = todos.map((todo) =>{\r\n            if(todo.checked === true) {\r\n                return {\r\n                    ...todo,\r\n                    'checked': !todo.checked,\r\n                }\r\n            }else return todo\r\n        })\r\n        updateTodos(clearTodos)\r\n        if(clearTodos.length===todos.length){\r\n            setFilterBy('all')\r\n        }\r\n    }\r\n    const countTodos = () => {\r\n        var cpt = 0\r\n        todos.map((todo) =>{\r\n            if(todo.checked===false){ cpt++ }\r\n            return null\r\n        })\r\n        return cpt\r\n    }\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(todos);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        updateTodos(items);\r\n    }\r\n    \r\n    if(todos.length === 0) return <div></div>\r\n    else return (\r\n        <React.Fragment>\r\n            <div className={classes.root}>\r\n                <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                    <Droppable droppableId=\"todos\">\r\n                        {(provided) => (\r\n                            <div \r\n                                className=\"todos\" \r\n                                {...provided.droppableProps} \r\n                                ref={provided.innerRef}\r\n                            >\r\n                                {todos.map((todo, index) => {\r\n                                    if(filterBy==='active' && todo.checked === true) {\r\n                                        return <div key={todo.id}></div>\r\n                                    }\r\n                                    else if(filterBy==='completed' && todo.checked === false) {\r\n                                        return <div key={todo.id}></div>\r\n                                    }\r\n                                    else return(\r\n                                        <ToDoItem \r\n                                            key={todo.id} \r\n                                            index= {index}\r\n                                            todo = {todo}\r\n                                            handleUpdateTodo={handleUpdateTodo}\r\n                                            deleteTodo={deleteTodo}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n                < Box className={classes.actionButtons} xs={12} >\r\n                    <Typography className={classes.nbItemsLeft} >\r\n                        {countTodos()} items left\r\n                    </Typography>\r\n                    <div className={classes.buttonGroup} >\r\n                        <Button \r\n                            className={classes.button}\r\n                            onClick={handleAllClick} \r\n                            style ={\r\n                                filterBy==='all'? {\r\n                                    color: 'hsl(220, 98%, 61%)'\r\n                                }: {}\r\n                            }\r\n                        >\r\n                            All\r\n                        </Button>\r\n                        <Button \r\n                            className={classes.button}\r\n                            onClick={handleActiveClick} \r\n                            style ={\r\n                                filterBy==='active'? {\r\n                                    color: 'hsl(220, 98%, 61%)'\r\n                                }: {}\r\n                            }\r\n                        >\r\n                            Active\r\n                        </Button>\r\n                        <Button \r\n                            className={classes.button} \r\n                            onClick={handleCompltedClick}\r\n                            style ={\r\n                                filterBy==='completed'? {\r\n                                    color: 'hsl(220, 98%, 61%)'\r\n                                }: {}\r\n                            }\r\n                        >\r\n                            Completed\r\n                        </Button>\r\n                    </div>\r\n                    <Button \r\n                        className={classes.button}\r\n                        onClick={handleClearClick} \r\n                        style={{paddingRight: '20px',}}\r\n                    >\r\n                        Clear Completed\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n            <Box className={classes.reorderMsgBox}>\r\n                <Typography className={classes.reorderMsg}>\r\n                    Drag and drop to reorder list\r\n                </Typography>\r\n            </Box>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { \r\n\tGrid, \r\n\tTypography,\r\n\tBox,\r\n    IconButton,\r\n    FormControlLabel,\r\n    Checkbox,\r\n    TextField,\r\n    Icon,\r\n} from \"@material-ui/core\";\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\nimport ToDoList from './toDoList';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\t\tbackgroundImage: theme.palette.background.bgDesktop,\r\n\t\tbackgroundRepeat: \"no-repeat\",\r\n\t\tbackgroundSize: \"100% 300px\",\r\n        backgroundColor: theme.palette.background.default,\r\n\t\theight: \"100%\", // changed from \"100%\"\r\n        // [theme.breakpoints.down('xs')]: {\r\n        //     height: \"100%\",\r\n        // },\r\n        width: \"100%\",\r\n\t\tdisplay: 'flex',\r\n    },\r\n\tcontent: {\r\n\t\theight: \"auto\",\r\n        width: \"540px\",\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'column',\r\n\t\tmargin: '70px auto 130px auto',\r\n\t},\r\n    title: {\r\n        marginTop: '5px',\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'row',\r\n\t\twidth: '100%',\r\n\t\theight: '35px',\r\n\t\tjustifyContent: 'space-between',\r\n\t},\r\n\ttitleText: {\r\n\t\tfontWeight: '700',\r\n        fontSize: '2.5rem',\r\n        color: \"white\",\r\n        letterSpacing: \"0.7rem\",\r\n\t},\r\n    themeIconButton: {\r\n        padding: '0',\r\n    },\r\n    iconRoot: {\r\n        textAlign: 'center',\r\n        height: '30px',\r\n        width: '100%',\r\n    },\r\n    imageIcon: {\r\n        height: '100%',\r\n    },\r\n    inputTodo: {\r\n        display: 'flex',\r\n\t\tflexDirection: 'row',\r\n        alignItems: 'left',\r\n        marginTop: '50px',\r\n\t\tmarginBottom: '25px',\r\n        borderRadius: '5px',\r\n\t\twidth: '100%',\r\n\t\theight: '60px',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    inputTodoTextField: {\r\n        paddingTop: '5px',\r\n        justifyContent: 'center',\r\n        marginRight: '15px',\r\n        marginLeft: '0', \r\n        color: theme.palette.text.primary,\r\n    },\r\n    inputTodoIcon: {\r\n        width: '60px',\r\n        justifyContent: 'center',\r\n        margin: 'auto',\r\n    },\r\n    radioButtonUncheckedIcon: {\r\n        width: \"20px\",\r\n        height: \"20px\",\r\n        borderRadius: \"11px\",\r\n        borderStyle: 'solid',\r\n        borderWidth: 'thin',\r\n        color: theme.palette.border.primary,\r\n    },\r\n    checkBox: {\r\n        \"&:hover\": {\r\n            \"& div\": {\r\n                width: \"20px\",\r\n                height: \"20px\",\r\n                border: '1px solid transparent',\r\n                backgroundImage: 'linear-gradient('+theme.palette.background.paper\r\n                                +', '+theme.palette.background.paper\r\n                                +'), radial-gradient(circle at top left,' \r\n                                +'hsl(192, 100%, 67%),hsl(280, 87%, 65%))',\r\n                backgroundOrigin: 'border-box',\r\n                backgroundClip: 'content-box, border-box',\r\n            }\r\n        }\r\n    },\r\n    // reorderMsgBox: {\r\n    //     marginTop: '50px',\r\n    //     display: 'flex',\r\n\t// \tflexDirection: 'row',\r\n    //     justifyContent: 'center',\r\n    //     [theme.breakpoints.down('xs')]: {\r\n    //         marginTop: '105px',\r\n    //     }\r\n    // },\r\n    // reorderMsg: {\r\n    //     fontWeight: 700,\r\n    //     fontSize: '0.7em',\r\n    //     color: theme.palette.text.secondary,\r\n    // },\r\n\t[theme.breakpoints.down('xs')]: {\r\n\t\troot: {\r\n\t\t\tbackgroundImage: theme.palette.background.bgMobile,\r\n\t\t},\r\n\t\tcontent: {\r\n\t\t\twidth: '90%',\r\n\t\t},\r\n\t},\r\n\t[theme.breakpoints.between('sm', 'md')]: {\r\n\t\tcontent: {\r\n\t\t\twidth: '480px',\r\n\t\t},\r\n\t},\r\n}));\r\nexport default function ToDo({theme, changeTheme}) {\r\n    const classes = useStyles();\r\n    const [todo, setTodo] = useState({\r\n        isSubmit: false,\r\n        text: '',\r\n        checked: false,\r\n    })\r\n    const handleNewTodo = (e) =>{\r\n        if(e.target.name === \"checked\") setTodo({...todo, checked: !todo.checked,})\r\n        else setTodo({...todo, [e.target.name]: e.target.value,})\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        setTodo({...todo, isSubmit: true})\r\n    }\r\n    const afterSubmit = () => {\r\n        setTodo({\r\n            isSubmit: false,\r\n            text: '',\r\n            checked: false,\r\n        })\r\n    }\r\n    return (\r\n        <div  component=\"main\" className={classes.root}>\r\n            <Grid  className={classes.content}>\r\n                <Box className={classes.title} xs={12} >\r\n                    <Typography \r\n                        variant=\"h4\"\r\n                        component=\"h1\"\r\n                        className={classes.titleText}\r\n                    >\r\n                        TODO\r\n                    </Typography>\r\n                    <IconButton\r\n                        onClick={() => changeTheme()}\r\n                        style={{\r\n                            color: 'white',\r\n                            paddingRight: '0px',\r\n                            background: \"none\",\r\n                        }}\r\n                        disableRipple={true}\r\n                        className={classes.themeIconButton}\r\n                    >\r\n                        {theme==='light'? <Icon classes={{root: classes.iconRoot}}>\r\n                                            <img \r\n                                                className={classes.imageIcon} \r\n                                                src=\"/images/icon-moon.svg\"\r\n                                                alt=\"moon icon\"\r\n                                            />\r\n                                        </Icon>\r\n                                        : <Icon classes={{root: classes.iconRoot}}>\r\n                                            <img \r\n                                                className={classes.imageIcon} \r\n                                                src=\"/images/icon-sun.svg\"\r\n                                                alt=\"sun icon\"\r\n                                            />\r\n                                        </Icon>\r\n                        }\r\n                    </IconButton>\r\n                </Box>\r\n                <Box  xs={12} >\r\n                    <form  className={classes.inputTodo} onSubmit={handleSubmit}>\r\n                        <FormControlLabel\r\n                            className={classes.inputTodoIcon}\r\n                            control={\r\n                                <Checkbox \r\n                                    icon={\r\n                                        <div className={classes.radioButtonUncheckedIcon} />\r\n                                    }\r\n                                    checkedIcon={<DoneIcon \r\n                                                    style={{\r\n                                                        color: \"white\",\r\n                                                        fontSize: '15px',\r\n                                                    }}\r\n                                                />}\r\n                                    style={\r\n                                        todo.checked?{\r\n                                            background: 'linear-gradient(to right bottom, hsl(192, 100%, 67%), hsl(280, 87%, 65%))',\r\n                                            width: '4px',\r\n                                            height: '4px',\r\n                                        }: {background: 'none'}\r\n                                    }\r\n                                    name=\"checked\" \r\n                                    checked={todo.checked}\r\n                                    onChange={handleNewTodo}\r\n                                    disableRipple={true}\r\n                                    className={classes.checkBox}\r\n                                />\r\n                            }\r\n                        />\r\n                        <TextField \r\n                            type=\"text\" \r\n                            name=\"text\"\r\n                            value={todo.text} \r\n                            onChange={handleNewTodo} \r\n                            fullWidth\r\n                            focused={false}\r\n                            InputProps={{\r\n                                disableUnderline: true,\r\n                                classes: {\r\n                                    input: classes.inputTodoTextField\r\n                                }\r\n                            }}\r\n                            className= {classes.inputTodoTextField}\r\n                        />\r\n                    </form>\r\n                </Box>\r\n                <ToDoList\r\n                    isSubmit={todo.isSubmit}\r\n                    text={todo.text}\r\n                    checked={todo.checked}\r\n                    afterSubmit={afterSubmit}\r\n                />\r\n                {/* <Box className={classes.reorderMsgBox}>\r\n                    <Typography className={classes.reorderMsg}>\r\n                        Drag and drop to reorder list\r\n                    </Typography>\r\n                </Box> */}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useMemo} from \"react\";\nimport { ThemeProvider, createTheme } from '@material-ui/core/styles'\nimport ToDo from \"./components/toDo\";\n\nconst font =  \"'Josefin Sans', sans-serif\";\n\nfunction App() {\n    const [theme, setTheme] = useState('light')\n\tconst changeTheme = () => {\n\t\tif(theme==='light') { console.log(\"changed to dark\"); setTheme('dark')}\n\t\telse {console.log(\"changed to light\"); setTheme('light')}\n\t}\n\tconst customTheme = useMemo(\n\t\t() =>\n\t\t  \tcreateTheme({\n\t\t\t\tpalette: {\n\t\t\t\t\ttype: theme,\n\t\t\t\t\tbackground:{\n\t\t\t\t\t\tbgDesktop: theme==='light'? \"url(/images/bg-desktop-light.jpg)\": \n\t\t\t\t\t\t\t\t\t\t\t\t\t\"url(/images/bg-desktop-dark.jpg)\",\n\t\t\t\t\t\tbgMobile: theme==='light'?  \"url(/images/bg-mobile-light.jpg)\":\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"url(/images/bg-mobile-dark.jpg)\",\n\t\t\t\t\t\tdefault: theme==='light'? \"hsl(0, 0%, 98%)\": \"hsl(235, 21%, 11%)\",\n\t\t\t\t\t\tpaper: theme==='light'? \"white\": \"hsl(235, 24%, 19%)\",\n\t\t\t\t\t},\n\t\t\t\t\tborder:{\n\t\t\t\t\t\tprimary: theme==='light'?   \"hsl(233, 11%, 84%)\":\n\t\t\t\t\t\t\t\t\t\t\t\t\t  \"hsl(233, 14%, 35%)\",\n\t\t\t\t\t},\n\t\t\t\t\ttext:{\n\t\t\t\t\t\tprimary: theme==='light'?   \"hsl(235, 19%, 35%)\":\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"hsl(234, 39%, 85%)\",\n\t\t\t\t\t\tsecondary: theme==='light'?   \"hsl(236, 9%, 61%)\":\n\t\t\t\t\t\t\t\t\t\t\t\t\t  \"hsl(234, 11%, 52%)\",\n\t\t\t\t\t\thover: theme==='light'?   \"hsl(235, 19%, 35%)\":\n\t\t\t\t\t\t\t\t\t\t\t\t\t  \"hsl(236, 33%, 92%)\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttypography: {\n\t\t\t\t\tfontFamily: font,\n\t\t\t\t},\n\t\t  \t}),\n\t\t\t[theme],\n\t);\n    return (\n\t\t<ThemeProvider theme={customTheme}>\n\t\t\t<ToDo\n\t\t\t\ttheme={theme}\n\t\t\t\tchangeTheme={changeTheme}\n\t\t\t/>\n\t\t</ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}